{"data":{"markdownRemark":{"html":"<p>This example is a very simple analog clock. It consists of pixels that turn around a central point. To make this example work, we will focus on the function that creates our clock every time the canvas updates:</p>\n<pre><code class=\"language-js\">updateCanvasHandler(event) {\n    this.clearData()\n\n    // White point in the middle\n    this.data.positions.push(0, 0)\n    this.data.colors.push(...this.colors.white)\n\n    const vector = new Vector2(.5, 0)\n    this.data.positions.push(vector.x, vector.y)\n    this.data.colors.push(...this.colors.red)\n\n    const slots = 12;\n    const now = new Date()\n\n    for(let i = 0; i &#x3C; slots; i++) {\n        vector.rot(30)\n        this.data.positions.push(vector.x,vector.y)\n        this.data.colors.push(...this.colors['blue'])\n    }\n\n    const seconds = new Vector2(0, .4)\n    seconds.rot(-6 * now.getSeconds())\n    this.data.positions.push(seconds.x, seconds.y)\n    this.data.colors.push(...this.colors['yellow'])\n\n    const minutes = new Vector2(0, .5)\n    minutes.rot(now.getMinutes() * -6)\n    this.data.positions.push(minutes.x, minutes.y)\n    this.data.colors.push(...this.colors['white'])\n\n    const hours = new Vector2(0, .35)\n    hours.rot(now.getHours() * -6)\n    this.data.positions.push(hours.x, hours.y)\n    this.data.colors.push(...this.colors['magenta'])\n\n    this.drawScene()\n}\n</code></pre>\n<p>It may look a bit big and confusing now, but lets take it step by step:</p>\n<h2>The outline</h2>\n<p>First, we have to create an outline of our clock. The outline, in this case, consists of a white dot in the center of our two-dimensional space, and 12 dots marking the hours.</p>\n<p>First we have to clear our data by calling a simple function:</p>\n<pre><code class=\"language-js\">this.clearData()\n</code></pre>\n<p>Then, we will create our white dot in the middle by pushing a position and color to the application data:</p>\n<pre><code class=\"language-js\">this.data.positions.push(0, 0)\nthis.data.colors.push(...this.colors.white)\n</code></pre>\n<p>When that is done, we will make a new vector and use it to create our 12 surrounding dots:</p>\n<pre><code class=\"language-js\">const vector = new Vector2(.5, 0)\nthis.data.positions.push(vector.x, vector.y)\nthis.data.colors.push(...this.colors.red)\n</code></pre>\n<p>Now that our first dot is set, we will recycle this vector. We will create a loop that rotates it a certain amount every time and pushes that data to the application</p>\n<pre><code class=\"language-js\">const slots = 12;\nconst now = new Date()\n\nfor(let i = 0; i &#x3C; slots; i++) {\n    vector.rot(30)\n    this.data.positions.push(vector.x,vector.y)\n    this.data.colors.push(...this.colors['blue'])\n}\n</code></pre>\n<p>Now the outline of our clock is set, lets take a look at the time</p>\n<h2>The time</h2>","frontmatter":{"date":"April 14, 2019","path":"/docs/examples/analog-clock","title":"Analog Clock","chapter":2.1,"chapter_title":"Examples","chapter_path":"/docs/examples"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}